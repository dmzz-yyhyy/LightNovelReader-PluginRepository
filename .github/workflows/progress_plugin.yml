name: progress_plugin.yml
on:
  pull_request:
    paths:
      - data/**

jobs:
  CheckValidity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all changed files
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          files: |
            data/**

      - name: Install jq
        run: sudo apt-get install jq

      - name: Check if file absent
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          if [[ -z "${ALL_CHANGED_FILES}" ]]; then
          echo "Error: ALL_CHANGED_FILES array is empty"
          exit 1
          fi
          echo "Number of changed files: ${ALL_CHANGED_FILES}"
          echo "Changed files list:"
          printf '%s\n' "${ALL_CHANGED_FILES}"
          declare -A dirs_map
          for file in "${ALL_CHANGED_FILES}"; do
          if [[ -n "$file" ]]; then
          parent_dir=$(dirname "$file")
          echo "from $file\n"
          echo "to $parent_dir\n"
          dirs_map["$parent_dir"]=1
          fi
          done
          parent_dirs=("${!dirs_map[@]}")
          if [[ ${#parent_dirs[@]} -eq 0 ]]; then
          echo "Error: Unable to get parent directories"
          exit 1
          fi
          echo "Parent directories to check:"
          printf '%s\n' "${parent_dirs[@]}"
          echo "------------------------"
          for dir in "${parent_dirs[@]}"; do
          echo "Checking directory: $dir"
          if [[ ! -f "$dir/metadata.json" ]]; then
          echo "Error: Directory $dir is missing metadata.json file"
          exit 1
          fi
          compressed_file_number=$(jq -r '.compressed_file_number // empty' "$dir/metadata.json" 2>/dev/null)
          if [[ $? -ne 0 ]]; then
          compressed_file_number=""
          fi
          if [[ -z "$compressed_file_number" ]] || ! [[ "$compressed_file_number" =~ ^[0-9]+$ ]] || [[ "$compressed_file_number" -le 0 ]]; then
          if [[ ! -f "$dir/plugin.apk.lnrp" ]]; then
          echo "Error: Directory $dir is missing plugin.apk.lnrp file"
          exit 1
          fi
          else
          missing_files=()
          for ((i=1; i<=compressed_file_number; i++)); do
          if [[ $i -lt 10 ]]; then
          formatted_num="00$i"
          elif [[ $i -lt 100 ]]; then
          formatted_num="0$i"
          else
          formatted_num="$i"
          fi
          filename="plugin.zip.$formatted_num"
          if [[ ! -f "$dir/$filename" ]]; then
          missing_files+=("$filename")
          fi
          done
          if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "Error: Directory $dir is missing the following files: ${missing_files[*]}"
          exit 1
          fi
          fi
          echo "Directory $dir check passed"
          echo "---"
          done
          echo "All directory checks passed!"
          exit 0

      - name: Check json validity
        run: |
          all_valid=true
          for file in ${ALL_CHANGED_FILES}; do
            if [[ "$file" != *.json ]]; then
              continue
            fi
            if [[ ! -f "$file" ]]; then
              echo "❌ File does not exist: $file"
              all_valid=false
              continue
            fi
            echo "Checking: $file"
            if jq -e '
            .id | type == "string" and
            .version | type == "number" and
            .name | type == "string" and
            .versionName | type == "string" and
            .author | type == "string" and
            .description | type == "string"
            ' "$file" > /dev/null 2>&1; then
              echo "✅ Structure is correct"
            else
              echo "❌ Structure is incorrect"
              echo "   File content:"
              cat "$file"
              echo ""
              all_valid=false
            fi
          done
          if $all_valid; then
              echo "All JSON files have correct structure"
              exit 0
          else
              echo "Some JSON files have incorrect structure"
              exit 1
          fi

      - name: Check dir name
        run: |
          all_match=true
          for file in "${ALL_CHANGED_FILES[@]}"; do
          [[ "$file" != *.json || ! -f "$file" ]] && continue
          dir_name=$(basename "$(dirname "$file")")
          json_id=$(jq -r '.id' "$file" 2>/dev/null)
          if [[ "$dir_name" == "$json_id" ]]; then
          echo "✅ $file: Directory '$dir_name' matches ID '$json_id'"
          else
          echo "❌ $file: Directory '$dir_name' does not match ID '$json_id'"
          all_match=false
          fi
          done
          $all_match && exit 0 || exit 1


  ChangeRootPluginsMetadata:
    needs: CheckValidity
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Get all changed files
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          files: |
            data/**

      - name: Install jq
        run: sudo apt-get install jq

      - name: Sync plugins.json
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
            PLUGINS_FILE="data/plugins.json"
            for file in ${ALL_CHANGED_FILES}; do
              [[ "$file" != *.json ]] && continue
              [[ ! -f "$file" ]] && echo "Skip non-existent files: $file" && continue

              echo "Process: $file"
              plugin_data=$(jq -c '{id:
                .id, name: .name}' "$file" 2>/dev/null)

              if [[ -n "$plugin_data" ]]; then
                plugin_id=$(echo "$plugin_data" | jq -r '.id')
                jq --argjson new "$plugin_data" --arg id "$plugin_id" \
                  'if (.plugins | map(select(.id == $id)) | length) > 0 
                            then .plugins |= map(if .id == $id then $new else . end)
                            else .plugins += [$new] end' \
                  "$PLUGINS_FILE" > "${PLUGINS_FILE}.tmp" && mv "${PLUGINS_FILE}.tmp" "$PLUGINS_FILE"
                echo "✅ Succeeded"
                exit 0
              else
                echo "❌ Failed"
                exit 1
              fi
            done

      - name: Clean up plugins.json
        run: |
          PLUGINS_FILE="data/plugins.json"
          TARGET_DIR="data/"
          
          ids_to_remove=()
          while IFS= read -r id; do
          [[ -n "$id" && ! -d "$TARGET_DIR/$id" ]] && ids_to_remove+=("$id")
          done < <(jq -r '.plugins[].id' "$PLUGINS_FILE")
          [[ ${#ids_to_remove[@]} -eq 0 ]] && { echo "No plugins to remove"; exit 0; }
          jq_filter=".plugins |= map(select(.id != \"${ids_to_remove[0]}\""
          for ((i=1; i<${#ids_to_remove[@]}; i++)); do
          jq_filter+=" and .id != \"${ids_to_remove[$i]}\""
          done
          jq_filter+="))"
          jq "$jq_filter" "$PLUGINS_FILE" > "${PLUGINS_FILE}.tmp" && mv "${PLUGINS_FILE}.tmp" "$PLUGINS_FILE"
          echo "Removed ${#ids_to_remove[@]} plugins without directories"

      - uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "parse plugin information"
          file_pattern: 'data/**'
